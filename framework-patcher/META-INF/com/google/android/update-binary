#!/sbin/sh

OUTFD=$2
ZIP=$3

OLD_LD="${LD_LIBRARY_PATH}"

readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null
if [ "$?" -eq "0" ]; then
  OUTFD=0

  for FD in `ls /proc/$$/fd`; do
    readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
    if [ "$?" -eq "0" ]; then
      ps | grep " 3 $FD " | grep -v grep >/dev/null
      if [ "$?" -eq "0" ]; then
        OUTFD=$FD
        break
      fi
    fi
  done
fi

ui_print() {
  echo -n -e "ui_print $@\n" >> /proc/self/fd/$OUTFD
  echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
}

ui_print_sh() {
	while IFS= read -r line; do
		ui_print "$line"
		if [ -z "${line##*failed*}" ]; then
			exit 1
		fi
	done
}

is_mounted() {
  if [ ! -z "$2" ]; then
    cat /proc/mounts | grep $1 | grep $2, >/dev/null
  else
    cat /proc/mounts | grep $1 >/dev/null
  fi
  return $?
}

error () {
	echo "${@}"
	exit 1
}

if ! (is_mounted /system); then
	mount -oro /system || error " !! failed to mount /system"
fi

BASEDIR="/tmp/dexpatcher"

SDK_VERSION=$(awk -F= '/^ro.build.version.sdk/{print $2}' /system/build.prop)
ABI=$(getprop ro.product.cpu.abi)

DP_LD="/system/lib:$LD_LIBRARY_PATH"

if [ "$ABI" = "arm64-v8a" ]; then
	DP_LD="/system/lib64:/system/lib:$LD_LIBRARY_PATH"
fi

PATH="$PATH:/system/bin:/system/xbin"

if ! which zip >/dev/null; then
	erorr " !! zip binary not available"
fi

mount_image() {
  if [ ! -d "$2" ]; then
    mount -o rw,remount rootfs /
    mkdir -p $2 2>/dev/null
    [ ! -d "$2" ] && return 1
  fi
  if (! is_mounted $2); then
    LOOPDEVICE=
    for LOOP in 0 1 2 3 4 5 6 7; do
      if (! is_mounted $2); then
        LOOPDEVICE=/dev/block/loop$LOOP
        if [ ! -e "$LOOPDEVICE" ]; then
          mknod $LOOPDEVICE b 7 $LOOP
        fi
        losetup $LOOPDEVICE $1
        if [ "$?" -eq "0" ]; then
          mount -t ext4 -o loop $LOOPDEVICE $2
          if (! is_mounted $2); then
            /system/bin/toolbox mount -t ext4 -o loop $LOOPDEVICE $2
          fi
          if (! is_mounted $2); then
            /system/bin/toybox mount -t ext4 -o loop $LOOPDEVICE $2
          fi
        fi
        if (is_mounted $2); then
          echo "$LOOPDEVICE" > /tmp/loopdevice
          break;
        fi
      fi
    done
  fi
}

_dalvikvm () {
	LD_LIBRARY_PATH="${DP_LD}" \
		dalvikvm -cp "${BASEDIR}/dexpatcher.dex" \
			lanchon.dexpatcher.Main \
			"${DEX_OPTS}" --api-level "${SDK_VERSION}" \
			--verbose --output "${1}" "${2}" "${3}" 2>1 || \
				error " !! dexpatcher failed"
}

_zipd () {
	LD_LIBRARY_PATH="${DP_LD}" \
		zip -d "${1}" 'classes*.dex' 2>1 || \
		error " !! zip failed"
}

_zipj () {
	LD_LIBRARY_PATH="${DP_LD}" \
		zip -j "${2}" "${1}"/classes*.dex 2>1 || \
		error " !! zip failed"
}

apply_patch () {

	if [ ${SDK_VERSION} -gt 21 ]; then
		mkdir -p "${1}"
	fi

	# XXX yes, this shitty
	# XXX	"(func(a || b)) | c) || exit"
	# XXX indeed works!
	(_dalvikvm "${@}" | LD_LIBRARY_PATH="${OLD_LD}" ui_print_sh) || exit 1
	(_zipd "${2}" | LD_LIBRARY_PATH="${OLD_LD}" ui_print_sh) || exit 1
	(_zipj "${1}" "${2}" | LD_LIBRARY_PATH="${OLD_LD}" ui_print_sh) || exit 1

	rm -rf "${1}"

}

if [ ${SDK_VERSION} -gt 25 ]; then
	ui_print " !! Android versions beyond Nougat are not yet supported"
	exit 1
fi

if [ ${SDK_VERSION} -lt 16 ]; then
	ui_print " !! Android versions before Jelly Bean are not supported"
	exit 1
fi

ui_print " "
ui_print "********************************"
ui_print "      NanoMod 6.1.20170421     "
ui_print "       created by @Nanolx       "
ui_print "       Framework Patcher        "
ui_print "Powered by DexPatcher (@lanchon)"
ui_print "********************************"
ui_print " "

if [ ${SDK_VERSION} -lt 24 ]; then
	ui_print " > Android 4.1 - 6.0 detected"
	PATCH_HOOK="hook_4.1-6.0_services.jar.dex"
else
	ui_print " > Android 7.x detected"
	PATCH_HOOK="hook_7.x_services.jar.dex"
fi

PATCH_CORE="core_services.jar.dex"

ui_print " > preparing environment"

unzip -o "$3" "dexpatcher/*" -d /tmp

ui_print " > patching services.jar"
ui_print " "
ui_print " << this might take a few minutes,"
ui_print " << depending on your device's power"
ui_print " "

if [ ${SDK_VERSION} -gt 21 ]; then
	DEX_OPTS="--multi-dex"
fi

if ! (is_mounted /data); then
	mount -orw /data || error " !! failed to mount /data"
fi

if [ -f /data/magisk.img ]; then
	mount_image /data/magisk.img /magisk || \
		error " !! failed to mount /magisk"
fi

cp /system/framework/services.jar \
	/tmp/services.jar || \
	error " !! failed to copy services.jar"

ui_print " >> applying hook patch"
apply_patch /tmp/services.jar-hook \
	/tmp/services.jar \
	"${BASEDIR}/${PATCH_HOOK}" || \
	error "failed to patch services.jar with ${PATCH_HOOK}"

ui_print " "
ui_print " >> applying core patch"
apply_patch /tmp/services.jar-hook-core \
	/tmp/services.jar \
	"${BASEDIR}/${PATCH_CORE}" || \
	error "failed to patch services.jar with ${PATCH_CORE}"

ui_print " "
if [ -d /magisk/NanoMod ]; then
	ui_print " << installing services.jar to: NanoMod (full)"
	mkdir -p /magisk/NanoMod/system/framework/
	cp /tmp/services.jar \
		/magisk/NanoMod/system/framework/services.jar || \
		error " !! failed to install services.jar to: NanoMod (full)"
elif [ -d /magisk/NanoModmicroG ]; then
	ui_print " << installing services.jar to: NanoMod (microG)"
	mkdir -p /magisk/NanoModmicroG/system/framework/
	cp /tmp/services.jar \
		/magisk/NanoModmicroG/system/framework//services.jar || \
		error " !! failed to install services.jar into NanoMod (microG)"
else
	ui_print " << installing services.jar to: ROM"
	mount -orw,remount /system >/dev/null
	cp /tmp/services.jar \
		/system/framework//services.jar || \
		error " !! failed to install services.jar to: ROM"
fi

ui_print " >> clean up"
if (is_mounted /magisk); then
	umount /magisk
	losetup -d $(cat /tmp/loopdevice)
	rm /tmp/loopdevice
fi

mount -oro,remount /system >/dev/null

rm /tmp/services.jar

ui_print " "
ui_print " > Done!"
ui_print " "
ui_print "Thanks for using NanoMod"
ui_print " "

exit 0
